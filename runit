#!/bin/python3
import subprocess
import argparse
import os
import pathlib
import shutil

from torch import func
from run_scripts.docker import run_vim

# Location for mounts
script_location = os.path.dirname(os.path.realpath(__file__))
env_location = os.path.dirname(script_location) + "/env"
vault_location = os.path.dirname(script_location) + "/vault"
# Current Location
current_location = os.getcwd()
# Code location
temp_dir = "/tmp/code_mount"
if not os.path.exists(temp_dir):
    os.makedirs(temp_dir)


def run_gist(args, gist_id=None):
    command = """
        gh gist clone "$gist_id" /gist;
        vim -O /gist/*;
        git add .;
        git commit -m "update"
        git push
        """
    if args:
        gist_name = " ".join(args.gist)
        command = (
            f"""gist_id=$(echo "{gist_name}" | gh gist create -f "notes.md" -d "{gist_name}" | awk '{{print $NF}}');"""
            + command
        )
    else:
        command = f"""gist_id={gist_id}""" + command

    run_vim(
        env_location,
        vault_location,
        mount_dir=temp_dir,
        mount_dir_name="gist",
        command=command,
        check_changes=False,
        clean_mount_dir=True,
    )


def run_local(args):
    """
    Runs a command in a Docker container with the current directory mounted.

    Args:
        args (argparse.Namespace): The command-line arguments.

    Returns:
        None
    """
    current_dir = subprocess.run(["pwd"], capture_output=True, text=True).stdout.strip()
    dir_name = current_dir.split("/")[-1]  # Get the name of the current directory
    run_vim(
        env_location,
        vault_location,
        mount_dir=current_dir,
        mount_dir_name=dir_name,
        command="vim",
        check_changes=False,
        clean_mount_dir=False,
    )


def run_gh(args):
    """
    Runs a command for cloning a GitHub repository in a Docker container.

    Args:
        args (argparse.Namespace): The command-line arguments.

    Returns:
        None
    """
    os.chdir(temp_dir)

    name = args.repo.replace("/", "-")
    repo = args.repo.split("/")[-1] if "/" in args.repo else args.repo
    command = f"""\
    gh repo clone {args.repo} /{repo} 
    git config --global --add safe.directory /{repo}
    """

    # Additional git command based on input parameters
    if args.branch:
        command += f"git switch {args.branch}; "
    elif args.pullrequest:
        command += f"gh pr checkout {args.pullrequest}; "
    elif args.checkout:
        command += f"git checkout -b {args.checkout}; git push --set-upstream origin {args.checkout}; "

    # Update submodules if any
    command += "git submodule update --init; ln -s /root/.env .env;vim;"

    run_vim(
        env_location,
        vault_location,
        mount_dir=temp_dir,
        mount_dir_name=repo,
        command=command,
        check_changes=True,
        clean_mount_dir=True,
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="commands", dest="command")

    local_parser = subparsers.add_parser(
        "local", help="Run command for a container with local directory"
    )
    local_parser.set_defaults(func=run_local)

    gist_parser = subparsers.add_parser("gist", help="Create a gist")
    gist_parser.add_argument("gist", help="Specify the gist Description", nargs="+")
    gist_parser.set_defaults(func=run_gist)

    gh_parser = subparsers.add_parser("gh", help="Run command for cloning a repo")
    gh_parser.add_argument("repo", help="Specify the repository for cloning")
    gh_parser.set_defaults(func=run_gh)
    gh_parser.add_argument("-b", "--branch", help="The branch to checkout")
    gh_parser.add_argument(
        "-p", "--pullrequest", help="The pull request number to checkout"
    )
    gh_parser.add_argument("-c", "--checkout", help="Checkout a new branch from main")

    gistnote_parser = subparsers.add_parser(
        "gistnotes", help="Open GistNotes Browsing Tool"
    )
    gistnote_parser.set_defaults()

    args = parser.parse_args()
    args.func(args)
