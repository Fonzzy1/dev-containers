#!/bin/python3
import subprocess
import argparse
import os
import uuid
import subprocess


# Location for mounts
script_location = os.path.dirname(os.path.realpath(__file__))
env_location = os.path.dirname(script_location) + "/env"
mount_location = os.path.dirname(script_location) + "/mount_files"
# Current Location
current_location = os.getcwd()
# Code location


def is_gpu_available():
    try:
        # This command checks for Nvidia GPU by calling nvidia-smi
        result = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
        return result.returncode == 0
    except FileNotFoundError:
        # If nvidia-smi is not found, no GPU is available or NVIDIA drivers are not installed
        return False


def run_vim(
    env_location,
    mount_dir,
    mount_dir_name=None,
    command="bash;",
    check_changes=True,
    additional_mounts=[
        (env_location, "/root/.env"),
        (mount_location, "/root/mount"),
    ],
):

    # Check if container is running
    result = subprocess.run(
        ["docker", "ps", "-q", "-f", f"name={mount_dir_name}"],
        capture_output=True,
        text=True,
    )
    if result.stdout.strip():
        # Container is running, exec into it
        subprocess.run(["docker", "exec", "-it", mount_dir_name, "bash"])
        return

    current_dir = subprocess.run(
        ["pwd"], capture_output=True, text=True
    ).stdout.strip()
    os.chdir(mount_dir)

    if mount_dir_name == None:
        mount_dir_name = mount_dir.split("/")[-1]

    pre_command = f"""
            gh auth setup-git;
            git config --global --add safe.directory /{mount_dir_name};
            """

    command = pre_command + command

    if check_changes:
        command += ' \
            CHANGES=$(git status --porcelain); \
            UPSTREAM_CHANGES=$(git cherry -v); \
            if [ -n "$CHANGES" ] || [ -n "$UPSTREAM_CHANGES" ]; then \
                lazygit; \
            fi'

    display = os.getenv("DISPLAY")

    gpu_flag = ["--gpus", "all"] if is_gpu_available() else []

    mount_list = []
    for mount in additional_mounts:
        mount_list.append("-v")
        mount_list.append(f"{mount[0]}:{mount[1]}")

    subprocess.run(
        [
            "docker",
            "run",
            "-it",
            "--env",
            f"HOST_UID={os.getuid()}",
            "--env",
            f"HOST_GID={os.getgid()}",
            "--env-file",
            env_location,
            "-e",
            f"SYS_DIR={mount_dir}",
            "-e",
            f"CONT_DIR=/{mount_dir_name}",
            "--hostname",
            mount_dir_name,
            "--name",
            mount_dir_name,
            "--net=host",
            "--rm",
            "-w",
            f"/{mount_dir_name}",
            "-v",
            "/var/run/docker.sock:/var/run/docker.sock",
            "-v",
            "/home/fonzzy/.Xauthority:/root/.Xauthority:rw",
            "-v",
            "/tmp/.X11-unix:/tmp/.X11-unix",
            *gpu_flag,
            "--env",
            f"DISPLAY={display}",
            "-v",
            "/home/fonzzy/pipe:/pipe",
            "--mount",
            f"type=bind,source={mount_dir},target=/{mount_dir_name}",
            *mount_list,
            "fonzzy1/vim",
            "/bin/bash",
            "-c",
            command,
        ]
    )
    os.chdir(current_dir)


def run_notes(args):
    temp_dir = f"/tmp/code_mount/wiki"
    if not os.path.isdir(temp_dir):
        os.makedirs(temp_dir)
        command = """gh repo clone wiki /wiki -- --recurse-submodules; git submodule foreach 'git switch main'; chown -R $HOST_UID:$HOST_GID /wiki ;nvim;"""
    else:
        command = """git submodule foreach 'git switch main'; chown -R $HOST_UID:$HOST_GID /wiki; nvim;"""

    run_vim(
        env_location,
        mount_dir=temp_dir,
        mount_dir_name="wiki",
        command=command,
        check_changes=True,
    )


def run_local(args):
    """
    Runs a command in a Docker container with the current directory mounted.

    Args:
        args (argparse.Namespace): The command-line arguments.

    Returns:
        None
    """
    current_dir = subprocess.run(
        ["pwd"], capture_output=True, text=True
    ).stdout.strip()
    # Get the name of the current directory
    dir_name = current_dir.split("/")[-1]
    run_vim(
        env_location,
        mount_dir=current_dir,
        mount_dir_name=dir_name,
        command="nvim;",
        check_changes=False,
    )


def run_gh(args):
    """
    Runs a command for cloning a GitHub repository in a Docker container.

    Args:
        args (argparse.Namespace): The command-line arguments.

    Returns:
        None
    """
    name = args.repo.replace("/", "-")
    repo = args.repo.split("/")[-1] if "/" in args.repo else args.repo

    temp_dir = f"/tmp/code_mount/{name}"
    if not os.path.isdir(temp_dir):
        os.makedirs(temp_dir)
        command = f"""\
        gh repo clone {args.repo} /{repo} 
        git config --global --add safe.directory /{repo}
        chown -R $HOST_UID:$HOST_GID /{repo}; 
        """
    else:
        command = "chown -R $HOST_UID:$HOST_GID /{repo}; "
    os.chdir(temp_dir)

    # Update submodules if any
    command += "git submodule update --init; ln -s /root/.env .env;nvim;"

    run_vim(
        env_location,
        mount_dir=temp_dir,
        mount_dir_name=repo,
        command=command,
        check_changes=True,
    )


def run_setup(args):
    if args.init:
        os.system(f"bash {script_location}/setup --init")
    else:
        os.system(f"bash {script_location}/setup")


def run_config(args):
    # Get the name of the current directory
    dir_name = script_location.split("/")[-1]
    run_vim(
        env_location,
        mount_dir=script_location,
        mount_dir_name=dir_name,
        command="nvim; ",
        check_changes=True,
    )


def run_podcasts(args):
    current_dir = subprocess.run(
        ["pwd"], capture_output=True, text=True
    ).stdout.strip()
    # Get the name of the current directory
    dir_name = current_dir.split("/")[-1]
    # Build the command and add the -m flag if requested
    command = "python3 /scripts/podcast_downloader.py"
    if args.music:
        command += " -m"
    run_vim(
        env_location,
        mount_dir=current_dir,
        mount_dir_name=dir_name,
        command=command,
        check_changes=False,
        additional_mounts=[
            (env_location, "/root/.env"),
            (mount_location, "/root/mount"),
            ("/home/fonzzy/Music", "/Music"),
        ],
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="commands", dest="command")

    subparsers.default = "local"

    local_parser = subparsers.add_parser(
        "local", help="Run command for a container with local directory"
    )
    local_parser.set_defaults(func=run_local)

    gh_parser = subparsers.add_parser(
        "gh", help="Run command for cloning a repo"
    )
    gh_parser.add_argument("repo", help="Specify the repository for cloning")
    gh_parser.set_defaults(func=run_gh)

    gistnote_parser = subparsers.add_parser(
        "notes", help="Open GistNotes Browsing Tool"
    )
    gistnote_parser.set_defaults(func=run_notes)

    setup_parser = subparsers.add_parser(
        "setup", help="Setup the mounting and filestructure"
    )
    setup_parser.add_argument(
        "--init", help="Run the init flag", action="store_true"
    )
    setup_parser.set_defaults(func=run_setup)

    config_parser = subparsers.add_parser(
        "config", help="Edit the runit files inplace"
    )
    config_parser.set_defaults(func=run_config)

    podcast_parser = subparsers.add_parser(
        "audio", help="Download the Podcasts in current Dir"
    )
    podcast_parser.add_argument(
        "--music",
        "-m",
        action="store_true",
        help="If true, process as music as well",
    )
    podcast_parser.set_defaults(func=run_podcasts)

    args = parser.parse_args()
    if "func" in args:
        args.func(args)
    else:
        run_local(args)  # default function to run
