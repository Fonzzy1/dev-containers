#!/bin/python3
import subprocess
import argparse
import os
import pathlib


script_location = os.path.dirname(os.path.realpath(__file__))
env_location = os.path.dirname(script_location) + "/env"


def run_gist(args):
    command = f"""
        gist_id=$(gh gist list | grep "{args.gist}" | awk '{{print $1}}')
        if [ -z "$gist_id" ]; then
            gist_id=$(echo "{args.gist}" | gh gist create -f {args.gist} | awk '{{print $NF}}');
        fi;
        gh gist clone "$gist_id" /gist;
        cd /gist
        ln -s /root/.env .env"
        vim -O /gist/*
        echo $gist_id
    """
    check_changes_command = ' \
        CHANGES=$(git status --porcelain); \
        UPSTREAM_CHANGES=$(git cherry -v); \
        if [ -n "$CHANGES" ] || [ -n "$UPSTREAM_CHANGES" ]; then \
            vim -c \':G | only\'; \
        fi'

    # Final combined command
    final_command = command + check_changes_command

    subprocess.run(
        [
            "docker",
            "run",
            "-it",
            "--env-file",
            env_location,
            "--net=host",
            "--rm",
            "-w",
            "/gist",
            "-v",
            "/var/run/docker.sock:/var/run/docker.sock",
            "-v",
            f"{ env_location}:/root/.env",
            "fonzzy1/vim",
            "/bin/bash",
            "-c",
            final_command,
        ]
    )


def run_local(args):
    """
    Runs a command in a Docker container with the current directory mounted.

    Args:
        args (argparse.Namespace): The command-line arguments.

    Returns:
        None
    """
    current_dir = subprocess.run(["pwd"], capture_output=True, text=True).stdout.strip()
    dir_name = current_dir.split("/")[-1]  # Get the name of the current directory

    subprocess.run(
        [
            "docker",
            "run",
            "-it",
            "--env-file",
            env_location,
            "--net=host",
            "--rm",
            "-v",
            f"{current_dir}:/{dir_name}",  # Mount to a directory with the same name
            "-w",
            f"/{dir_name}",  # Set the working directory
            "-v",
            "/var/run/docker.sock:/var/run/docker.sock",
            "fonzzy1/vim",
            "/bin/bash",
            "-c",
            f"gh auth setup-git; git config --global --add safe.directory /{dir_name}; vim",
        ]
    )


def run_gh(args):
    """
    Runs a command for cloning a GitHub repository in a Docker container.

    Args:
        args (argparse.Namespace): The command-line arguments.

    Returns:
        None
    """
    name = args.repo.replace("/", "-")
    repo = args.repo.split("/")[-1] if "/" in args.repo else args.repo
    command = f"gh auth setup-git; gh repo clone {args.repo} /{repo}; "

    # Additional git command based on input parameters
    if args.branch:
        command += f"git switch {args.branch}; "
    elif args.pullrequest:
        command += f"gh pr checkout {args.pullrequest}; "
    elif args.checkout:
        command += f"git checkout -b {args.checkout}; git push --set-upstream origin {args.checkout}; "

    # Update submodules if any
    command += "git submodule update --init; ln -s /root/.env .env;vim;"

    # Check for unpushed or uncommitted changes before exiting Vim
    check_changes_command = ' \
        CHANGES=$(git status --porcelain); \
        UPSTREAM_CHANGES=$(git cherry -v); \
        if [ -n "$CHANGES" ] || [ -n "$UPSTREAM_CHANGES" ]; then \
            vim -c \':G | only\'; \
        fi'

    # Final combined command
    final_command = command + check_changes_command

    subprocess.run(
        [
            "docker",
            "run",
            "-it",
            "--env-file",
            env_location,
            "--name",
            name,
            "--net=host",
            "--rm",
            "-w",
            f"/{repo}",
            "-v",
            "/var/run/docker.sock:/var/run/docker.sock",
            "-v",
            f"{env_location}:/root/.env",
            "fonzzy1/vim",
            "/bin/bash",
            "-c",
            final_command,
        ]
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="commands", dest="command")

    local_parser = subparsers.add_parser(
        "local", help="Run command for a container with local directory"
    )
    local_parser.set_defaults(func=run_local)

    gh_parser = subparsers.add_parser(
        "gist", help="Run command for cloning or creating a gist"
    )
    gh_parser.add_argument("gist", help="Specify the gist name")
    gh_parser.set_defaults(func=run_gist)

    gh_parser = subparsers.add_parser("gh", help="Run command for cloning a repo")
    gh_parser.add_argument("repo", help="Specify the repository for cloning")
    gh_parser.set_defaults(func=run_gh)
    gh_parser.add_argument("-b", "--branch", help="The branch to checkout")
    gh_parser.add_argument(
        "-p", "--pullrequest", help="The pull request number to checkout"
    )
    gh_parser.add_argument("-c", "--checkout", help="Checkout a new branch from main")

    args = parser.parse_args()
    args.func(args)
