#!/bin/python3
import subprocess
import argparse
import os
import pathlib
import shutil
import uuid

# Location for mounts
script_location = os.path.dirname(os.path.realpath(__file__))
env_location = os.path.dirname(script_location) + "/env"
# Current Location
current_location = os.getcwd()
# Code location
temp_dir = f"/tmp/code_mount/{str(uuid.uuid4())}"
os.makedirs(temp_dir)


def run_vim(
    env_location,
    mount_dir,
    mount_dir_name=None,
    command="vim",
    check_changes=True,
    clean_mount_dir=False,
):
    current_dir = subprocess.run(["pwd"], capture_output=True, text=True).stdout.strip()
    os.chdir(mount_dir)

    if mount_dir_name == None:
        mount_dir_name = mount_dir.split("/")[-1]

    pre_command = f"""
            gh auth setup-git;
            git config --global --add safe.directory /{mount_dir_name};
            """

    command = pre_command + command

    if clean_mount_dir:
        command = f"find /{mount_dir_name} -mindepth 1 -delete;" + command

    if check_changes:
        command += ' \
            CHANGES=$(git status --porcelain); \
            UPSTREAM_CHANGES=$(git cherry -v); \
            if [ -n "$CHANGES" ] || [ -n "$UPSTREAM_CHANGES" ]; then \
                vim -c \':G | only\'; \
            fi'

    display = os.getenv("DISPLAY")

    subprocess.run(
        [
            "docker",
            "run",
            "-it",
            "--env-file",
            env_location,
            "-e",
            f"SYS_DIR={mount_dir}",
            "-e",
            f"CONT_DIR=/{mount_dir_name}",
            "-e",
            f"VAULT=/VAULT",
            "-e",
            "--net=host",
            "--rm",
            "-w",
            f"/{mount_dir_name}",
            "-v",
            "/var/run/docker.sock:/var/run/docker.sock",
            "-v",
            "/home/fonzzy/.Xauthority:/root/.Xauthority:rw",
            "-v",
            "/tmp/.X11-unix:/tmp/.X11-unix",
            "--env",
            f"DISPLAY={display}",
            "-v",
            "/home/fonzzy/pipe:/pipe",
            "-v",
            f"{mount_dir}:/{mount_dir_name}",
            "-v",
            f"{ env_location}:/root/.env",
            "-v",
            "fonzzy1/vim",
            "/bin/bash",
            "-c",
            command,
        ]
    )
    os.chdir(current_dir)


def run_gist_notes(args):
    run_vim(
        env_location,
        mount_dir=temp_dir,
        mount_dir_name="wiki",
        command="/scripts/gistnotes.py",
        check_changes=False,
        clean_mount_dir=True,
    )


def run_local(args):
    """
    Runs a command in a Docker container with the current directory mounted.

    Args:
        args (argparse.Namespace): The command-line arguments.

    Returns:
        None
    """
    current_dir = subprocess.run(["pwd"], capture_output=True, text=True).stdout.strip()
    dir_name = current_dir.split("/")[-1]  # Get the name of the current directory
    run_vim(
        env_location,
        mount_dir=current_dir,
        mount_dir_name=dir_name,
        command="vim",
        check_changes=False,
        clean_mount_dir=False,
    )


def run_gh(args):
    """
    Runs a command for cloning a GitHub repository in a Docker container.

    Args:
        args (argparse.Namespace): The command-line arguments.

    Returns:
        None
    """
    os.chdir(temp_dir)

    name = args.repo.replace("/", "-")
    repo = args.repo.split("/")[-1] if "/" in args.repo else args.repo
    command = f"""\
    gh repo clone {args.repo} /{repo} 
    git config --global --add safe.directory /{repo}
    """

    # Additional git command based on input parameters
    if args.branch:
        command += f"git switch {args.branch}; "
    elif args.pullrequest:
        command += f"gh pr checkout {args.pullrequest}; "
    elif args.checkout:
        command += f"git checkout -b {args.checkout}; git push --set-upstream origin {args.checkout}; "

    # Update submodules if any
    command += "git submodule update --init; ln -s /root/.env .env;vim;"

    run_vim(
        env_location,
        mount_dir=temp_dir,
        mount_dir_name=repo,
        command=command,
        check_changes=True,
        clean_mount_dir=True,
    )


def run_setup(args):
    if args.init:
        os.system(f"bash {script_location}/setup --init")
    else:
        os.system(f"bash {script_location}/setup")


def run_build(args):
    os.system(f"bash -c 'cd  {script_location}; bash build'")


def run_config(args):
    dir_name = script_location.split("/")[-1]  # Get the name of the current directory
    run_vim(
        env_location,
        mount_dir=script_location,
        mount_dir_name=dir_name,
        command="vim; ",
        check_changes=True,
        clean_mount_dir=False,
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="commands", dest="command")

    local_parser = subparsers.add_parser(
        "local", help="Run command for a container with local directory"
    )
    local_parser.set_defaults(func=run_local)

    gh_parser = subparsers.add_parser("gh", help="Run command for cloning a repo")
    gh_parser.add_argument("repo", help="Specify the repository for cloning")
    gh_parser.set_defaults(func=run_gh)
    gh_parser.add_argument("-b", "--branch", help="The branch to checkout")
    gh_parser.add_argument(
        "-p", "--pullrequest", help="The pull request number to checkout"
    )
    gh_parser.add_argument("-c", "--checkout", help="Checkout a new branch from main")

    gistnote_parser = subparsers.add_parser(
        "notes", help="Open GistNotes Browsing Tool"
    )
    gistnote_parser.set_defaults(func=run_gist_notes)

    setup_parser = subparsers.add_parser(
        "setup", help="Setup the mounting and filestructure"
    )
    setup_parser.add_argument("--init", help="Run the init flag", action="store_true")
    setup_parser.set_defaults(func=run_setup)

    build_parser = subparsers.add_parser(
        "build", help="Build and push the vim container"
    )
    build_parser.set_defaults(func=run_build)

    config_parser = subparsers.add_parser("config", help="Edit the runit files inplace")
    config_parser.set_defaults(func=run_config)

    args = parser.parse_args()
    args.func(args)
